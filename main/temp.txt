#include <stdio.h>
#include "sdkconfig.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"
#include "esp_timer.h"
#include "esp_lcd_panel_ops.h"
#include "esp_lcd_panel_rgb.h"
#include "driver/gpio.h"
#include "esp_err.h"
#include "esp_log.h"
#include "lvgl.h"
#include "driver/i2c.h"
#include "ebyte_port.h"
#include "ebyte_core.h"

static const char *TAG = "example";


#define TFP410_PCLK     (24 * 1000 * 1000)

#define RGB_PIN_HSYNC          6
#define RGB_PIN_VSYNC          7
#define RGB_PIN_DE             15
#define RGB_PIN_CLK           8
#define RGB_PIN_B0          16 // B3
#define RGB_PIN_B1          17 // B4
#define RGB_PIN_B2          18 // B5
#define RGB_PIN_B3          3 // B6
#define RGB_PIN_B4          46 // B7
#define RGB_PIN_G0          0 // G2
#define RGB_PIN_G1          9 // G3
#define RGB_PIN_G2          10 // G4
#define RGB_PIN_G3          11 // G5
#define RGB_PIN_G4          12 // G6
#define RGB_PIN_G5         	13 // G7
#define RGB_PIN_R0         14  // R3
#define RGB_PIN_R1         21  // R4
#define RGB_PIN_R2         47 // R5
#define RGB_PIN_R3         48 // R6
#define RGB_PIN_R4         45 // R7
#define RGB_DISP_EN        -1

#define TFP410_I2C_CLK_FREQ    100000L

// The pixel number in horizontal and vertical

#define RESOLUTION_640X480 1

#if RESOLUTION_640X480
#define LCD_H_RES              640
#define	LCD_V_RES              480
#elif RESOLUTION_800X600
#define LCD_H_RES              800
#define	LCD_V_RES              600
#elif RESOLUTION_1024X768
#define LCD_H_RES              1024
#define	LCD_V_RES              768
#endif

#define TFP410_I2C_SDA		GPIO_NUM_5
#define TFP410_I2C_SCL		GPIO_NUM_4


#define CONFIG_DOUBLE_FB 1

#if CONFIG_DOUBLE_FB
#define LCD_NUM_FB             2
#else
#define LCD_NUM_FB             1
#endif // CONFIG_EXAMPLE_DOUBLE_FB
#define LVGL_TICK_PERIOD_MS    2


#define TFP410_ADDRESS0		0x70

/* vendor id low and high register*/
#define TFP410_VENDOR_ID_L		0x00
#define TFP410_VENDOR_ID_H		0x01

/*device id registers*/
#define TFP410_DEVICE_ID_L		0x02
#define TFP410_DEVICE_ID_H		0x03

/* revision registers*/
#define TFP410_REV_ID			0x04

/* control mode register 1*/
#define TFP410_CTL_1_MODE		0x08

/* control mode register 2*/
#define TFP410_CTL_2_MODE		0x09

/* control mode register 3*/
#define TFP410_CTL_3_MODE		0x0A

/* cfg register*/
#define TFP410_CFG				0x0B

#define TFP410_DE_DLY			0x32
#define TFP410_CTL				0x33
#define I2C_MASTER_TIMEOUT_MS       1000



// we use two semaphores to sync the VSYNC event and the LVGL task, to avoid potential tearing effect
#if CONFIG_EXAMPLE_AVOID_TEAR_EFFECT_WITH_SEM
SemaphoreHandle_t sem_vsync_end;
SemaphoreHandle_t sem_gui_ready;
#endif

#define I2C_MASTER_NUM              0

#define WRITE_BIT I2C_MASTER_WRITE              /*!< I2C master write */
#define READ_BIT I2C_MASTER_READ                /*!< I2C master read */
#define ACK_CHECK_EN 0x1                        /*!< I2C master will check ack from slave*/
#define ACK_CHECK_DIS 0x0                       /*!< I2C master will not check ack from slave */
#define ACK_VAL 0x0                             /*!< I2C ack value */
#define NACK_VAL 0x1

extern void example_lvgl_demo_ui(lv_disp_t *disp);

IRAM_ATTR static bool OnVSYNCCallBack(esp_lcd_panel_handle_t panel, const esp_lcd_rgb_panel_event_data_t *event_data, void *user_data)
{
//    BaseType_t high_task_awoken = pdFALSE;
//#if CONFIG_EXAMPLE_AVOID_TEAR_EFFECT_WITH_SEM
//    if (xSemaphoreTakeFromISR(sem_gui_ready, &high_task_awoken) == pdTRUE) {
//        xSemaphoreGiveFromISR(sem_vsync_end, &high_task_awoken);
//    }
//#endif
//    return high_task_awoken == pdTRUE;

    TaskHandle_t task_to_notify = (TaskHandle_t)user_data;
    BaseType_t high_task_wakeup;
    vTaskNotifyGiveFromISR(task_to_notify, &high_task_wakeup);
    return high_task_wakeup == pdTRUE;
}

typedef struct{
	uint16_t v_res;
	uint16_t h_res;
}TFP410_Res_TypeDef;

static void LVGL_FlushCallback(lv_disp_drv_t *drv, const lv_area_t *area, lv_color_t *color_map)
{
    esp_lcd_panel_handle_t panel_handle = (esp_lcd_panel_handle_t) drv->user_data;
    int offsetx1 = area->x1;
    int offsetx2 = area->x2;
    int offsety1 = area->y1;
    int offsety2 = area->y2;
#if CONFIG_EXAMPLE_AVOID_TEAR_EFFECT_WITH_SEM
    xSemaphoreGive(sem_gui_ready);
    xSemaphoreTake(sem_vsync_end, portMAX_DELAY);
#endif
    // pass the draw buffer to the driver
    esp_lcd_panel_draw_bitmap(panel_handle, offsetx1, offsety1, offsetx2 + 1, offsety2 + 1, color_map);
    lv_disp_flush_ready(drv);
}

static void LVGL_IncTick(void *arg)
{
    /* Tell LVGL how many milliseconds has elapsed */
    lv_tick_inc(LVGL_TICK_PERIOD_MS);
}



esp_err_t ESPMI_ConfigI2C(i2c_port_t port){
	i2c_config_t i2cConfig = {0};

	i2cConfig.mode = I2C_MODE_MASTER;
	i2cConfig.scl_io_num = TFP410_I2C_SCL;
	i2cConfig.sda_io_num = TFP410_I2C_SDA;
	i2cConfig.master.clk_speed = TFP410_I2C_CLK_FREQ;
	i2cConfig.scl_pullup_en = true;
	i2cConfig.sda_pullup_en = true;

	if(i2c_param_config(port, &i2cConfig) == ESP_OK){
		return i2c_driver_install(port, i2cConfig.mode, 0, 0, 0);
	}
	return ESP_FAIL;
}

/**
 * @brief Read a sequence of bytes from a TFP410 registers
 */
static esp_err_t TFP410_Read(uint8_t reg_addr, uint8_t *data, size_t len)
{
    return i2c_master_write_read_device(I2C_MASTER_NUM, TFP410_ADDRESS0>>1, &reg_addr, 1, data, len, I2C_MASTER_TIMEOUT_MS / portTICK_PERIOD_MS);
}

/**
 * @brief Write a byte to a TFP410 register
 */
static esp_err_t TFP410_WriteByte(uint8_t reg_addr, uint8_t data)
{
    int ret;
    uint8_t write_buf[2] = {reg_addr, data};

    ret = i2c_master_write_to_device(I2C_MASTER_NUM, TFP410_ADDRESS0 >> 1, write_buf, sizeof(write_buf), I2C_MASTER_TIMEOUT_MS / portTICK_PERIOD_MS);

    return ret;
}



void TFP410_Init(void){
	uint8_t temp = 0;

	TFP410_WriteByte(TFP410_CTL_1_MODE, 0x00);
	vTaskDelay(100);
	TFP410_WriteByte(TFP410_CTL_1_MODE, 0x0F);
	TFP410_Read(TFP410_CTL_2_MODE, &temp, sizeof(uint8_t));
	temp |= 0x39;
	TFP410_WriteByte(TFP410_CTL_2_MODE, temp);
//	TFP410_WriteByte(TFP410_CTL_3_MODE, 0xF0);
//	TFP410_WriteByte(0x33, 0x70);
//
//	TFP410_WriteByte(0x38, 800 & 0xff);
//	TFP410_WriteByte(0x39, 800 >> 8);
//
//	TFP410_WriteByte(0x36, 600 & 0xff);
//	TFP410_WriteByte(0x37, 600 >> 8);

	TFP410_Read(0x04, &temp, sizeof(uint8_t));
	printf("TFP410 ID: %i\r\n", temp);
	temp = 0;
	TFP410_Read(0x03, &temp, sizeof(uint8_t));
	uint16_t id = 0;
	id |= ((uint16_t)temp) << 8;
	vTaskDelay(10);
	TFP410_Read(0x02, &temp, sizeof(uint8_t));
	id |= (uint8_t)temp;
	printf("TFP410 VEND ID: %i\r\n", id);
	TFP410_Read(TFP410_CTL_1_MODE, &temp, sizeof(uint8_t));
	printf("control mode: %i\r\n", temp);

}

void TFP410_ReadResolution(TFP410_Res_TypeDef* res){
	uint8_t temp = 0;
	uint16_t h_res = 0;
	uint16_t v_res = 0;

	TFP410_Read(0x3B, &temp, sizeof(uint8_t));
	h_res = ((uint16_t)temp&0x03) << 8;
	vTaskDelay(50);
	TFP410_Read(0x3A, &temp, sizeof(uint8_t));
	h_res |= temp;
	vTaskDelay(50);
	TFP410_Read(0x3d, &temp, sizeof(uint8_t));
	v_res = ((uint16_t)temp&0x03) << 8;
	vTaskDelay(50);
	TFP410_Read(0x3c, &temp, sizeof(uint8_t));
	v_res |= temp;

	res->h_res = h_res;
	res->v_res = v_res;

}
uint8_t TFP410_ReadConnectionSatus(void)
{
	uint8_t reg;

	if(TFP410_Read(TFP410_CTL_2_MODE, &reg, sizeof(uint8_t)) != ESP_OK){
		ESP_LOGI(TAG, "Error in i2c read");
	}

	return reg;
}

esp_lcd_panel_handle_t ESPMI_InitRGBBus(lv_disp_drv_t* disp_drive, _Bool refresh_on_demand, esp_lcd_rgb_panel_vsync_cb_t vsync_callback, const void* user_data){
    ESP_LOGI(TAG, "Install RGB LCD panel driver");
    esp_lcd_panel_handle_t panel_handle = NULL;
    esp_lcd_rgb_panel_config_t panel_config = {
        .data_width = 16, // RGB565 in parallel mode, thus 16bit in width
        .psram_trans_align = 64,
        .num_fbs = LCD_NUM_FB,
#if CONFIG_EXAMPLE_USE_BOUNCE_BUFFER
        .bounce_buffer_size_px = 20 * LCD_H_RES,
#endif
        .clk_src = LCD_CLK_SRC_PLL240M,
        .disp_gpio_num = RGB_DISP_EN,
        .pclk_gpio_num = RGB_PIN_CLK,
        .vsync_gpio_num = RGB_PIN_VSYNC,
        .hsync_gpio_num = RGB_PIN_HSYNC,
        .de_gpio_num = RGB_PIN_DE,
        .data_gpio_nums = {
            RGB_PIN_B0,
            RGB_PIN_B1,
            RGB_PIN_B2,
            RGB_PIN_B3,
            RGB_PIN_B4,
            RGB_PIN_G0,
            RGB_PIN_G1,
            RGB_PIN_G2,
            RGB_PIN_G3,
            RGB_PIN_G4,
            RGB_PIN_G5,
            RGB_PIN_R0,
            RGB_PIN_R1,
            RGB_PIN_R2,
            RGB_PIN_R3,
            RGB_PIN_R4,
        },
        .timings = {
            .pclk_hz = TFP410_PCLK,
            .h_res = LCD_H_RES,
            .v_res = LCD_V_RES,
            // The following parameters should refer to LCD spec
            .hsync_back_porch = 80,
            .hsync_front_porch = 16,
            .hsync_pulse_width = 64,
            .vsync_back_porch = 13,
            .vsync_front_porch = 3,
            .vsync_pulse_width = 4,
            .flags.pclk_active_neg = false,
			.flags.vsync_idle_low = true,
			.flags.hsync_idle_low = true,
			.flags.de_idle_high = false,
			.flags.pclk_idle_high = false,

        },
		.flags.refresh_on_demand = refresh_on_demand,
        .flags.fb_in_psram = true, // allocate frame buffer in PSRAM
    };
    ESP_ERROR_CHECK(esp_lcd_new_rgb_panel(&panel_config, &panel_handle));

    ESP_LOGI(TAG, "Register event callbacks");
    esp_lcd_rgb_panel_event_callbacks_t cbs = {
        .on_vsync = vsync_callback,
    };
    ESP_ERROR_CHECK(esp_lcd_rgb_panel_register_event_callbacks(panel_handle, &cbs, user_data));

    ESP_LOGI(TAG, "Initialize RGB LCD panel");
    ESP_ERROR_CHECK(esp_lcd_panel_reset(panel_handle));
    ESP_ERROR_CHECK(esp_lcd_panel_init(panel_handle));

    return panel_handle;
}
void LVGL_Task(void* pvParameters){
	uint32_t time_till_next = 0;
	for(;;){
		time_till_next = lv_timer_handler();
		vTaskDelay(time_till_next);

	}
}
void app_main(void)
{
    static lv_disp_draw_buf_t disp_buf;
    static lv_disp_drv_t disp_drv;
    TFP410_Res_TypeDef res = {.h_res = 0, .v_res = 0};
    esp_lcd_panel_handle_t panelHandle = NULL;
#if CONFIG_EXAMPLE_AVOID_TEAR_EFFECT_WITH_SEM
    ESP_LOGI(TAG, "Create semaphores");
    sem_vsync_end = xSemaphoreCreateBinary();
    assert(sem_vsync_end);
    sem_gui_ready = xSemaphoreCreateBinary();
    assert(sem_gui_ready);
#endif

    ESPMI_ConfigI2C(I2C_MASTER_NUM);
    TFP410_Init();

    panelHandle = ESPMI_InitRGBBus(NULL, false, OnVSYNCCallBack, xTaskGetCurrentTaskHandle());

    ESP_LOGI(TAG, "Initialize LVGL library");
    lv_init();
    void *buf1 = NULL;
    void *buf2 = NULL;
#if CONFIG_DOUBLE_FB
    ESP_LOGI(TAG, "Use frame buffers as LVGL draw buffers");
    ESP_ERROR_CHECK(esp_lcd_rgb_panel_get_frame_buffer(panelHandle, 2, &buf1, &buf2));
    // initialize LVGL draw buffers
    lv_disp_draw_buf_init(&disp_buf, buf1, buf2, LCD_H_RES * LCD_V_RES);
#else
    ESP_LOGI(TAG, "Allocate separate LVGL draw buffers from PSRAM");
    buf1 = heap_caps_malloc(LCD_H_RES * 100 * sizeof(lv_color_t), MALLOC_CAP_SPIRAM);
    assert(buf1);
    buf2 = heap_caps_malloc(LCD_H_RES * 100 * sizeof(lv_color_t), MALLOC_CAP_SPIRAM);
    assert(buf2);
    // initialize LVGL draw buffers
    lv_disp_draw_buf_init(&disp_buf, buf1, buf2, LCD_H_RES * 100);
#endif // CONFIG_EXAMPLE_DOUBLE_FB

    ESP_LOGI(TAG, "Register display driver to LVGL");
    lv_disp_drv_init(&disp_drv);
    disp_drv.hor_res = LCD_H_RES;
    disp_drv.ver_res = LCD_V_RES;
    disp_drv.flush_cb = LVGL_FlushCallback;
    disp_drv.draw_buf = &disp_buf;
    disp_drv.user_data = panelHandle;
#if CONFIG_DOUBLE_FB
    disp_drv.full_refresh = true; // the full_refresh mode can maintain the synchronization between the two frame buffers
#endif
    lv_disp_t *disp = lv_disp_drv_register(&disp_drv);

    ESP_LOGI(TAG, "Install LVGL tick timer");
    // Tick interface for LVGL (using esp_timer to generate 2ms periodic event)
    const esp_timer_create_args_t lvgl_tick_timer_args = {
        .callback = &LVGL_IncTick,
        .name = "lvgl_tick"
    };
    esp_timer_handle_t lvgl_tick_timer = NULL;
    ESP_ERROR_CHECK(esp_timer_create(&lvgl_tick_timer_args, &lvgl_tick_timer));
    ESP_ERROR_CHECK(esp_timer_start_periodic(lvgl_tick_timer, LVGL_TICK_PERIOD_MS * 1000));

    ESP_LOGI(TAG, "Display LVGL Scatter Chart");
    example_lvgl_demo_ui(disp);
//   xTaskCreatePinnedToCore(LVGL_Task, "lvgl_task", 1024*5, NULL, 10, NULL, PRO_CPU_NUM);
//    xTaskCreate(LVGL_Task, "lvgl_task", 1024*5, NULL, 1, NULL);
    while (1) {
    	uint32_t time_till_next = lv_timer_handler();
    	vTaskDelay(time_till_next);
//		TFP410_ReadResolution(&res);


    }
}
